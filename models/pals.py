import torch
import torch.nn as nn
import math
import pdb

def gelu(x):
    """Implementation of the gelu activation function.
        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):
        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))
    """
    return x * 0.5 * (1.0 + torch.erf(x / math.sqrt(2.0)))

class BERTPals(nn.Module):
    def __init__(self, config):
        super(BERTPals, self).__init__()
        # Encoder and decoder matrices project down to the smaller dimension
        self.aug_dense = nn.Linear(config.hidden_size, config.hidden_size_pals)
        self.aug_dense2 = nn.Linear(config.hidden_size_pals, config.hidden_size)

        # Attention without the final matrix multiply.
        self.attn = BertProjectedSelfAttention(config.hidden_size_pals,
                                               config.num_attention_heads_pals,
                                               config.attention_probs_dropout_prob)
        self.config = config
        self.use_pal_patterns = config.use_pal_patterns
        self.hidden_act_fn = gelu

    def forward(self, hidden_states, attention_mask=None, dynamic_attn_masks=None, synthesized_heads=None):
        hidden_states_aug = self.aug_dense(hidden_states)
        if self.use_pal_patterns:
            hidden_states_aug = self.attn(
                hidden_states_aug,
                attention_mask=attention_mask,
                dynamic_attn_masks=dynamic_attn_masks,
                synthesized_heads=synthesized_heads)[0]
        else:
            hidden_states_aug = self.attn(hidden_states_aug, attention_mask=attention_mask)[0]
        hidden_states = self.aug_dense2(hidden_states_aug)
        hidden_states = self.hidden_act_fn(hidden_states)
        return hidden_states

    def _init_zero_weights(self, module):
        """
        Initialize weights to zero (have no effects on final output).

        This function needs to be "applied" after the encoder weights are already initialized.
        """
        if isinstance(module, nn.Linear):
            module.weight.data.zero_()
            if module.bias is not None:
                module.bias.data.zero_()


class BertProjectedSelfAttention(nn.Module):
    """
    Trimmed down version of BertSelfAttention for Projected Attention Layer
    """
    def __init__(self, hidden_size=256, num_attention_heads=4, attention_probs_dropout_prob=0.1):
        super().__init__()
        if hidden_size % num_attention_heads != 0:
            raise ValueError(
                f"The hidden size ({hidden_size}) is not a multiple of the number of attention "
                f"heads ({num_attention_heads})"
            )

        self.num_attention_heads = num_attention_heads
        self.attention_head_size = int(hidden_size / num_attention_heads)
        self.all_head_size = self.num_attention_heads * self.attention_head_size

        self.query = nn.Linear(hidden_size, self.all_head_size)
        self.key = nn.Linear(hidden_size, self.all_head_size)
        self.value = nn.Linear(hidden_size, self.all_head_size)

        self.dropout = nn.Dropout(attention_probs_dropout_prob)

    def transpose_for_scores(self, x):
        new_x_shape = x.size()[:-1] + (self.num_attention_heads, self.attention_head_size)
        x = x.view(*new_x_shape)
        return x.permute(0, 2, 1, 3)

    def forward(
        self,
        hidden_states,
        attention_mask=None,
        head_mask=None,
        encoder_hidden_states=None,
        encoder_attention_mask=None,
        past_key_value=None,
        output_attentions=False,
        dynamic_attn_masks=None,
        synthesized_heads=None,
    ):

        key_layer = self.transpose_for_scores(self.key(hidden_states))
        value_layer = self.transpose_for_scores(self.value(hidden_states))
        query_layer = self.transpose_for_scores(self.query(hidden_states))
        
        # Take the dot product between "query" and "key" to get the raw attention scores.
        attention_scores = torch.matmul(query_layer, key_layer.transpose(-1, -2))

        if synthesized_heads != None:
            for idx in synthesized_heads:
                attention_scores[:, idx] = dynamic_attn_masks[:, idx].float()

        # Apply our dynamic attention mask by expanding the regular attention mask
        if dynamic_attn_masks != None:
            masked_value = -10000.0
            max_input_len = attention_scores.shape[-1]
            attention_mask = attention_mask.repeat(1, self.num_attention_heads, max_input_len, 1)
            attention_mask.masked_fill_(~dynamic_attn_masks, masked_value)

        attention_scores = attention_scores / math.sqrt(self.attention_head_size)
        if attention_mask is not None:
            # Apply the attention mask is (precomputed for all layers in BertModel forward() function)
            attention_scores = attention_scores + attention_mask

        # Normalize the attention scores to probabilities.
        attention_probs = nn.Softmax(dim=-1)(attention_scores)

        # This is actually dropping out entire tokens to attend to, which might
        # seem a bit unusual, but is taken from the original Transformer paper.
        attention_probs = self.dropout(attention_probs)

        # Mask heads if we want to
        if head_mask is not None:
            attention_probs = attention_probs * head_mask

        context_layer = torch.matmul(attention_probs, value_layer)

        context_layer = context_layer.permute(0, 2, 1, 3).contiguous()
        new_context_layer_shape = context_layer.size()[:-2] + (self.all_head_size,)
        context_layer = context_layer.view(*new_context_layer_shape)

        outputs = (context_layer, attention_probs) if output_attentions else (context_layer,)

        return outputs